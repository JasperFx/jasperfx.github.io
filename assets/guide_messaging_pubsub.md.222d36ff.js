import{_ as s,c as n,o as a,d as e}from"./app.ba9181fa.js";const h='{"title":"Publishing and Sending Messages","description":"","frontmatter":{},"headers":[{"level":2,"title":"Send Messages to a Specific Endpoint or Topic","slug":"send-messages-to-a-specific-endpoint-or-topic"},{"level":2,"title":"Customizing Message Delivery","slug":"customizing-message-delivery"}],"relativePath":"guide/messaging/pubsub.md","lastUpdated":1655492219741}',t={},p=e(`<h1 id="publishing-and-sending-messages" tabindex="-1">Publishing and Sending Messages <a class="header-anchor" href="#publishing-and-sending-messages" aria-hidden="true">#</a></h1><p><a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/publisher-subscriber" target="_blank" rel="noopener noreferrer">Publish/Subscribe</a> is a messaging pattern where the senders of messages do not need to specifically know what the specific subscribers are for a given message. In this case, some kind of middleware or infrastructure is responsible for either allowing subscribers to express interest in what messages they need to receive or apply routing rules to send the published messages to the right places. Jasper&#39;s messaging support was largely built to support the publish/subscibe messaging patterm.</p><p>To send a message with Jasper, use the <code>IMessagePublisher</code> interface or the bigger <code>IExecutionContext</code> interface that are registered in your application&#39;s IoC container. The sample below shows the most common usage:</p><p><a id="snippet-sample_sending_message_with_servicebus"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token return-type class-name">ValueTask</span> <span class="token function">SendMessage</span><span class="token punctuation">(</span><span class="token class-name">IExecutionContext</span> bus<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// In this case, we&#39;re sending an &quot;InvoiceCreated&quot;</span>
    <span class="token comment">// message</span>
    <span class="token class-name"><span class="token keyword">var</span></span> @<span class="token keyword">event</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvoiceCreated</span>
    <span class="token punctuation">{</span>
        Time <span class="token operator">=</span> DateTimeOffset<span class="token punctuation">.</span>Now<span class="token punctuation">,</span>
        Purchaser <span class="token operator">=</span> <span class="token string">&quot;Guy Fieri&quot;</span><span class="token punctuation">,</span>
        Amount <span class="token operator">=</span> <span class="token number">112.34</span><span class="token punctuation">,</span>
        Item <span class="token operator">=</span> <span class="token string">&quot;Cookbook&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> bus<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>@<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/PublishingSamples.cs#L134-L149" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_sending_message_with_servicebus" title="Start of snippet">anchor</a></sup></p><p>That by itself will send the <code>InvoiceCreated</code> message to whatever subscribers are interested in that message. The <code>SendAsync()</code> method will throw an exception if Jasper doesn&#39;t know where to send the message. In other words, there has to be a subscriber of some sort for that message.</p><p>On the other hand, the <code>PublishAsync()</code> method will send a message if there is a known subscriber and ignore the message if there is no subscriber:</p><p><a id="snippet-sample_publishing_message_with_servicebus"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token return-type class-name">ValueTask</span> <span class="token function">PublishMessage</span><span class="token punctuation">(</span><span class="token class-name">IExecutionContext</span> bus<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// In this case, we&#39;re sending an &quot;InvoiceCreated&quot;</span>
    <span class="token comment">// message</span>
    <span class="token class-name"><span class="token keyword">var</span></span> @<span class="token keyword">event</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvoiceCreated</span>
    <span class="token punctuation">{</span>
        Time <span class="token operator">=</span> DateTimeOffset<span class="token punctuation">.</span>Now<span class="token punctuation">,</span>
        Purchaser <span class="token operator">=</span> <span class="token string">&quot;Guy Fieri&quot;</span><span class="token punctuation">,</span>
        Amount <span class="token operator">=</span> <span class="token number">112.34</span><span class="token punctuation">,</span>
        Item <span class="token operator">=</span> <span class="token string">&quot;Cookbook&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> bus<span class="token punctuation">.</span><span class="token function">PublishAsync</span><span class="token punctuation">(</span>@<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/PublishingSamples.cs#L152-L167" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_publishing_message_with_servicebus" title="Start of snippet">anchor</a></sup></p><h2 id="send-messages-to-a-specific-endpoint-or-topic" tabindex="-1">Send Messages to a Specific Endpoint or Topic <a class="header-anchor" href="#send-messages-to-a-specific-endpoint-or-topic" aria-hidden="true">#</a></h2><p>// TODO</p><h2 id="customizing-message-delivery" tabindex="-1">Customizing Message Delivery <a class="header-anchor" href="#customizing-message-delivery" aria-hidden="true">#</a></h2><p>TODO -- more text here</p><p><a id="snippet-sample_sendmessageswithdeliveryoptions"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">SendMessagesWithDeliveryOptions</span><span class="token punctuation">(</span><span class="token class-name">IMessagePublisher</span> publisher<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> publisher<span class="token punctuation">.</span><span class="token function">PublishAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Message1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeliveryOptions</span>
    <span class="token punctuation">{</span>
        AckRequested <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        ContentType <span class="token operator">=</span> <span class="token string">&quot;text/xml&quot;</span><span class="token punctuation">,</span> <span class="token comment">// you can do this, but I&#39;m not sure why you&#39;d want to override this</span>
        DeliverBy <span class="token operator">=</span> DateTimeOffset<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// set a message expiration date</span>
        DeliverWithin <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token function">Hours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// convenience method to set the deliver-by expiration date</span>
        ScheduleDelay <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token function">Hours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Send this in one hour, or...</span>
        ScheduledTime <span class="token operator">=</span> DateTimeOffset<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        ResponseType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Message2</span><span class="token punctuation">)</span> <span class="token comment">// ask the receiver to send this message back to you if it can</span>
    <span class="token punctuation">}</span>
        <span class="token comment">// There&#39;s a chained fluent interface for adding header values too</span>
        <span class="token punctuation">.</span><span class="token function">WithHeader</span><span class="token punctuation">(</span><span class="token string">&quot;tenant&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/CustomizingMessageDelivery.cs#L9-L28" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_sendmessageswithdeliveryoptions" title="Start of snippet">anchor</a></sup></p>`,18),o=[p];function c(i,u,r,l,k,d){return a(),n("div",null,o)}var g=s(t,[["render",c]]);export{h as __pageData,g as default};
