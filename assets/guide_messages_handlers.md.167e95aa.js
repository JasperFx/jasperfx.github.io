import{_ as n,c as s,o as a,d as e}from"./app.ba9181fa.js";const h='{"title":"Message Handlers","description":"","frontmatter":{},"headers":[{"level":2,"title":"How Jasper Consumes Your Message Handlers","slug":"how-jasper-consumes-your-message-handlers"},{"level":2,"title":"Naming Conventions","slug":"naming-conventions"},{"level":2,"title":"Instance Handler Methods","slug":"instance-handler-methods"},{"level":2,"title":"Static Handler Methods","slug":"static-handler-methods"},{"level":2,"title":"Constructor Injection","slug":"constructor-injection"},{"level":2,"title":"Method Injection","slug":"method-injection"},{"level":2,"title":"Cascading Messages from Actions","slug":"cascading-messages-from-actions"},{"level":2,"title":"Using the Message Envelope","slug":"using-the-message-envelope"},{"level":2,"title":"Using the Current IExecutionContext","slug":"using-the-current-iexecutioncontext"}],"relativePath":"guide/messages/handlers.md","lastUpdated":1655944674029}',t={},o=e(`<h1 id="message-handlers" tabindex="-1">Message Handlers <a class="header-anchor" href="#message-handlers" aria-hidden="true">#</a></h1><p>Jasper purposely eschews the typical <code>IHandler&lt;T&gt;</code> approach that most .Net messaging frameworks take in favor of a more flexible model that relies on naming conventions. This might throw some users that are used to being guided by implementing an expected interface or base class, but it allows Jasper to be much more flexible and reduces code noise.</p><p>As an example, here&#39;s about the simplest possible handler you could create:</p><p><a id="snippet-sample_simplest_possible_handler"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMessageHandler</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">MyMessage</span> message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// do stuff with the message</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/HandlerExamples.cs#L57-L65" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_simplest_possible_handler" title="Start of snippet">anchor</a></sup></p><p>Like most frameworks, Jasper follows the <a href="http://wiki.c2.com/?HollywoodPrinciple" target="_blank" rel="noopener noreferrer">Hollywood Principle</a> where the framework acts as an intermediary between the rest of the world and your application code. When a Jasper application receives a <code>MyMessage</code> message through one of its transports, Jasper will call your method and pass in the message that it received.</p><h2 id="how-jasper-consumes-your-message-handlers" tabindex="-1">How Jasper Consumes Your Message Handlers <a class="header-anchor" href="#how-jasper-consumes-your-message-handlers" aria-hidden="true">#</a></h2><p>If you&#39;re worried about the performance implications of Jasper calling into your code without any interfaces or base classes, nothing to worry about because Jasper <strong>does not use Reflection at runtime</strong> to call your actions. Instead, Jasper uses <a href="https://jeremydmiller.com/2015/11/11/using-roslyn-for-runtime-code-generation-in-marten/" target="_blank" rel="noopener noreferrer">runtime code generation with Roslyn</a> to write the &quot;glue&quot; code around your actions. Internally, Jasper is generating a subclass of <code>MessageHandler</code> for each known message type:</p><p><a id="snippet-sample_messagehandler"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MessageHandler</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">HandlerChain<span class="token punctuation">?</span></span> Chain <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// This method actually processes the incoming Envelope</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name">Task</span> <span class="token function">HandleAsync</span><span class="token punctuation">(</span><span class="token class-name">IExecutionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Jasper/Runtime/Handlers/MessageHandler.cs#L6-L16" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_messagehandler" title="Start of snippet">anchor</a></sup></p><p>See &lt;[linkto:documentation/execution/handlers]&gt; for information on how Jasper generates the <code>MessageHandler</code> code and how to customize that code.</p><h2 id="naming-conventions" tabindex="-1">Naming Conventions <a class="header-anchor" href="#naming-conventions" aria-hidden="true">#</a></h2><p>Out of the box, message handlers need to follow these naming conventions and rules:</p><ul><li>Classes must be public, concrete classes suffixed with either &quot;Handler&quot; or &quot;Consumer&quot;</li><li>Message handling methods must have be public and have a deterministic message type</li><li>The message type has to be a public type</li></ul><p>If a candidate method has a single argument, that argument type is assumed to be the message type. Otherwise, Jasper looks for any argument named either &quot;message&quot;, &quot;input&quot;, or &quot;@event&quot; to be the message type.</p><p>See &lt;[linkto:documentation/execution/discovery]&gt; for more information.</p><h2 id="instance-handler-methods" tabindex="-1">Instance Handler Methods <a class="header-anchor" href="#instance-handler-methods" aria-hidden="true">#</a></h2><p>Handler methods can be instance methods on handler classes if it&#39;s desirable to scope the handler object to the message:</p><p><a id="snippet-sample_examplehandlerbyinstance"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleHandler</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">Message1</span> message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Do work synchronously</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">Message2</span> message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Do work asynchronously</span>
        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/HandlerExamples.cs#L70-L85" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_examplehandlerbyinstance" title="Start of snippet">anchor</a></sup></p><p>Note that you can use either synchronous or asynchronous methods depending on your needs, so you&#39;re not constantly being forced to return <code>Task.CompletedTask</code> over and over again for operations that are purely CPU-bound (but Jasper itself might be doing that for you in its generated <code>MessageHandler</code> code).</p><h2 id="static-handler-methods" tabindex="-1">Static Handler Methods <a class="header-anchor" href="#static-handler-methods" aria-hidden="true">#</a></h2><div class="alert alert-info"><b>Note!</b> Using a static method as your message handler can be a small performance improvement by avoiding the need to create and garbage collect new objects at runtime.</div><p>As an alternative, you can also use static methods as message handlers:</p><p><a id="snippet-sample_examplehandlerbystaticmethods"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ExampleHandler</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">Message1</span> message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Do work synchronously</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">Message2</span> message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Do work asynchronously</span>
        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/HandlerExamples.cs#L90-L105" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_examplehandlerbystaticmethods" title="Start of snippet">anchor</a></sup></p><p>The handler classes can be static classes as well. This technique gets much more useful when combined with Jasper&#39;s support for method injection in a following section.</p><h2 id="constructor-injection" tabindex="-1">Constructor Injection <a class="header-anchor" href="#constructor-injection" aria-hidden="true">#</a></h2><p>Jasper can create your message handler objects by using an IoC container (or in the future just use straight up dependency injection without any IoC container overhead). In that case, you can happily inject dependencies into your message handler classes through the constructor like this example that takes in a dependency on an <code>IDocumentSession</code> from <a href="http://jasperfx.github.io/marten" target="_blank" rel="noopener noreferrer">Marten</a>:</p><p><a id="snippet-sample_handlerbuiltbyconstructorinjection"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceUsingHandler</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IDocumentSession</span> _session<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">ServiceUsingHandler</span><span class="token punctuation">(</span><span class="token class-name">IDocumentSession</span> session<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _session <span class="token operator">=</span> session<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">InvoiceCreated</span> created<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> invoice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Invoice</span> <span class="token punctuation">{</span>Id <span class="token operator">=</span> created<span class="token punctuation">.</span>InvoiceId<span class="token punctuation">}</span><span class="token punctuation">;</span>
        _session<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>invoice<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> _session<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/HandlerExamples.cs#L111-L129" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_handlerbuiltbyconstructorinjection" title="Start of snippet">anchor</a></sup></p><p>See &lt;[linkto:documentation/ioc]&gt; for more information about how Jasper integrates the application&#39;s IoC container.</p><h2 id="method-injection" tabindex="-1">Method Injection <a class="header-anchor" href="#method-injection" aria-hidden="true">#</a></h2><p>Similar to ASP.Net MVC Core, Jasper supports the concept of <a href="https://www.martinfowler.com/articles/injection.html" target="_blank" rel="noopener noreferrer">method injection</a> in handler methods where you can just accept additional arguments that will be passed into your method by Jasper when a new message is being handled.</p><p>Below is an example action method that takes in a dependency on an <code>IDocumentSession</code> from <a href="http://jasperfx.github.io/marten" target="_blank" rel="noopener noreferrer">Marten</a>:</p><p><a id="snippet-sample_handlerusingmethodinjection"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MethodInjectionHandler</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">InvoiceCreated</span> message<span class="token punctuation">,</span> <span class="token class-name">IDocumentSession</span> session<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> invoice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Invoice</span> <span class="token punctuation">{</span>Id <span class="token operator">=</span> message<span class="token punctuation">.</span>InvoiceId<span class="token punctuation">}</span><span class="token punctuation">;</span>
        session<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>invoice<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> session<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/HandlerExamples.cs#L135-L147" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_handlerusingmethodinjection" title="Start of snippet">anchor</a></sup></p><p>So, what can be injected as an argument to your message handler?</p><ol><li>Any service that is registered in your application&#39;s IoC container</li><li><code>Envelope</code></li><li>The current time in UTC if you have a parameter like <code>DateTime now</code> or <code>DateTimeOffset now</code></li><li>Services or variables that match a registered code generation strategy. See &lt;[linkto:documentation/execution/middleware_and_codegen]&gt; for more information on this mechanism.</li></ol><h2 id="cascading-messages-from-actions" tabindex="-1">Cascading Messages from Actions <a class="header-anchor" href="#cascading-messages-from-actions" aria-hidden="true">#</a></h2><p>To have additional messages queued up to be sent out when the current message has been successfully completed, you can return the outgoing messages from your handler methods with &lt;[linkto:documentation/execution/cascading]&gt;.</p><h2 id="using-the-message-envelope" tabindex="-1">Using the Message Envelope <a class="header-anchor" href="#using-the-message-envelope" aria-hidden="true">#</a></h2><p>To access the <code>Envelope</code> for the current message being handled in your message handler, just accept <code>Envelope</code> as a method argument like this:</p><p><a id="snippet-sample_handlerusingenvelope"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnvelopeUsingHandler</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">InvoiceCreated</span> message<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> howOldIsThisMessage <span class="token operator">=</span>
            DateTimeOffset<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">Subtract</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span>SentAt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/HandlerExamples.cs#L150-L159" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_handlerusingenvelope" title="Start of snippet">anchor</a></sup></p><p>See &lt;[linkto:documentation/integration/customizing_envelopes]&gt; for more information on interacting with <code>Envelope</code> objects.</p><h2 id="using-the-current-iexecutioncontext" tabindex="-1">Using the Current IExecutionContext <a class="header-anchor" href="#using-the-current-iexecutioncontext" aria-hidden="true">#</a></h2><p>If you want to access or use the current <code>IExecutionContext</code> for the message being handled to send response messages or maybe to enqueue local commands within the current outbox scope, just take in <code>IExecutionContext</code> as a method argument like in this example:</p><p><a id="snippet-sample_pinghandler"></a></p><div class="language-cs"><pre><code><span class="token keyword">using</span> <span class="token namespace">Jasper</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Messages</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Logging</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">Ponger</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PingHandler</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ValueTask</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">Ping</span> ping<span class="token punctuation">,</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>PingHandler<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">,</span> <span class="token class-name">IExecutionContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;Got Ping #{Number}&quot;</span><span class="token punctuation">,</span> ping<span class="token punctuation">.</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">RespondToSenderAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Pong</span> <span class="token punctuation">{</span> Number <span class="token operator">=</span> ping<span class="token punctuation">.</span>Number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/PingPong/Ponger/PingHandler.cs#L1-L19" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_pinghandler" title="Start of snippet">anchor</a></sup><a id="snippet-sample_pinghandler-1"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PingHandler</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Simple message handler for the PingMessage message type</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">ValueTask</span> <span class="token function">Handle</span><span class="token punctuation">(</span>
        <span class="token comment">// The first argument is assumed to be the message type</span>
        <span class="token class-name">PingMessage</span> message<span class="token punctuation">,</span>

        <span class="token comment">// Jasper supports method injection similar to ASP.Net Core MVC</span>
        <span class="token comment">// In this case though, IMessageContext is scoped to the message</span>
        <span class="token comment">// being handled</span>
        <span class="token class-name">IExecutionContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ConsoleWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>ConsoleColor<span class="token punctuation">.</span>Blue<span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;Got ping #</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message<span class="token punctuation">.</span>Number</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PongMessage</span>
        <span class="token punctuation">{</span>
            Number <span class="token operator">=</span> message<span class="token punctuation">.</span>Number
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// This usage will send the response message</span>
        <span class="token comment">// back to the original sender. Jasper uses message</span>
        <span class="token comment">// headers to embed the reply address for exactly</span>
        <span class="token comment">// this use case</span>
        <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">RespondToSenderAsync</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/PingPongWithRabbitMq/Ponger/PingHandler.cs#L8-L37" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_pinghandler-1" title="Start of snippet">anchor</a></sup></p>`,60),p=[o];function c(l,i,r,u,d,k){return a(),s("div",null,p)}var g=n(t,[["render",c]]);export{h as __pageData,g as default};
