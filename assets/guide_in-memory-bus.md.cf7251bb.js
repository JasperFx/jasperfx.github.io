import{_ as s,c as a,o as n,d as e}from"./app.ba9181fa.js";const h='{"title":"Jasper as Command Bus","description":"","frontmatter":{},"headers":[{"level":2,"title":"Enqueueing Messages Locally","slug":"enqueueing-messages-locally"},{"level":2,"title":"The Default Queue","slug":"the-default-queue"},{"level":2,"title":"Local Message Routing","slug":"local-message-routing"},{"level":2,"title":"Durable Local Messages","slug":"durable-local-messages"},{"level":2,"title":"Scheduling Local Execution","slug":"scheduling-local-execution"},{"level":2,"title":"Configuring Parallelization and Execution Properties","slug":"configuring-parallelization-and-execution-properties"},{"level":2,"title":"Explicitly Enqueue to a Specific Local Queue","slug":"explicitly-enqueue-to-a-specific-local-queue"},{"level":2,"title":"Local Queues as a Messaging Transport","slug":"local-queues-as-a-messaging-transport"}],"relativePath":"guide/in-memory-bus.md","lastUpdated":1655944673932}',t={},p=e(`<h1 id="jasper-as-command-bus" tabindex="-1">Jasper as Command Bus <a class="header-anchor" href="#jasper-as-command-bus" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The in memory queueing feature is automatically enabled for all known message types within all Jasper applications.</p></div><p>Jasper can be used as an in-memory, command bus where messages can be processed either immediately or through in memory queues within your application. The queueing is all based around the <a href="https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/how-to-perform-action-when-a-dataflow-block-receives-data" target="_blank" rel="noopener noreferrer">TPL Dataflow library</a> objects from the <a href="https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/dataflow-task-parallel-library" target="_blank" rel="noopener noreferrer">TPL Dataflow</a> library. As such, you have a fair amount of control over parallelization and even some back pressure. These local queues can be used directly, or as a transport to accept messages sent through <code>IMessagePublisher.SendAsync()</code> or <code>IMessagePublisher.PublishAsync()</code>. using the application&#39;s <a href="/guide/messaging/#routing-rules">message routing rules</a>.</p><h2 id="enqueueing-messages-locally" tabindex="-1">Enqueueing Messages Locally <a class="header-anchor" href="#enqueueing-messages-locally" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">warning</p><p>The <code>IMessagePublisher</code> and <code>IExecutionContext</code> interfaces both implement the <code>ICommandBus</code> interface as well.</p></div><p>You can queue up messages to be executed locally and asynchronously in a background thread:</p><p><a id="snippet-sample_enqueue_locally"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">enqueue_locally</span><span class="token punctuation">(</span><span class="token class-name">ICommandBus</span> bus<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Enqueue a message to the local worker queues</span>
    <span class="token keyword">await</span> bus<span class="token punctuation">.</span><span class="token function">EnqueueAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Message1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/EnqueueSamples.cs#L8-L16" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_enqueue_locally" title="Start of snippet">anchor</a></sup></p><p>This feature is useful for asynchronous processing in web applications or really any kind of application where you need some parallelization or concurrency.</p><p>Some things to know about the local queues:</p><ul><li>Local worker queues can be durable, meaning that the enqueued messages are persisted first so that they aren&#39;t lost if the application is shut down before they&#39;re processed. More on that below.</li><li>You can use any number of named local queues, and they don&#39;t even have to be declared upfront (might want to be careful with that though)</li><li>Local worker queues utilize Jasper&#39;s <a href="/guide/messages/error-handling.html">error handling</a> policies to selectively handle any detected exceptions from the <a href="/guide/messages/handlers.html">message handlers</a>.</li><li>You can control the priority and parallelization of each individual local queue</li><li>Message types can be routed to particular queues</li><li><a href="/guide/messages/handlers.html#cascading-messages-from-actions">Cascading messages</a> can be used with the local queues</li><li>The local queues can be used like any other message transport and be the target of routing rules</li></ul><h2 id="the-default-queue" tabindex="-1">The Default Queue <a class="header-anchor" href="#the-default-queue" aria-hidden="true">#</a></h2><p>Out of the box, each Jasper application has a default queue named &quot;default&quot;. In the absence of any other routing rules, all messages enqueued to <code>ICommandBus</code> will be published to this queue. The default in memory queue can be configured like this:</p><p><a id="snippet-sample_configuredefaultqueue"></a></p><div class="language-cs"><pre><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> <span class="token keyword">await</span> Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseJasper</span><span class="token punctuation">(</span>opts <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        opts<span class="token punctuation">.</span>DefaultLocalQueue<span class="token punctuation">.</span><span class="token function">MaximumParallelMessages</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">StartAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/ConfigureDurableLocalQueueApp.cs#L28-L36" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_configuredefaultqueue" title="Start of snippet">anchor</a></sup></p><h2 id="local-message-routing" tabindex="-1">Local Message Routing <a class="header-anchor" href="#local-message-routing" aria-hidden="true">#</a></h2><p>In the absence of any kind of routing rules, any message enqueued with <code>ICommandBus.Enqueue()</code> will just be handled by the <em>default</em> local queue. To override that choice on a message type by message type basis, you can use the <code>[LocalQueue]</code> attribute on a message type:</p><p><a id="snippet-sample_local_queue_routed_message"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">LocalQueue</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;important&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImportanceMessage</span>
<span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/LocalQueueMessage.cs#L5-L12" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_local_queue_routed_message" title="Start of snippet">anchor</a></sup></p><p>Otherwise, you can take advantage of Jasper&#39;s message routing rules like this:</p><p><a id="snippet-sample_localtransportapp"></a></p><div class="language-cs"><pre><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> <span class="token keyword">await</span> Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseJasper</span><span class="token punctuation">(</span>opts <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Publish Message2 messages to the &quot;important&quot;</span>
        <span class="token comment">// local queue</span>
        opts<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">PublishMessage</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Message2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ToLocalQueue</span><span class="token punctuation">(</span><span class="token string">&quot;important&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">StartAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/MessagingConfigurationExamples.cs#L104-L115" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_localtransportapp" title="Start of snippet">anchor</a></sup></p><p>The routing rules and/or <code>[LocalQueue]</code> routing is also honored for cascading messages, meaning that any message that is handled inside a Jasper system could publish cascading messages to the local worker queues.</p><p>See <a href="/guide/messaging/#routing-rules">message routing rules</a> for more information.</p><h2 id="durable-local-messages" tabindex="-1">Durable Local Messages <a class="header-anchor" href="#durable-local-messages" aria-hidden="true">#</a></h2><p>The local worker queues can optionally be designated as &quot;durable,&quot; meaning that local messages would be persisted until they can be successfully processed to provide a guarantee that the message will be successfully processed in the case of the running application faulting or having been shut down prematurely (assuming that other nodes are running or it&#39;s restarted later of course).</p><p>Here is an example of configuring a local queue to be durable:</p><p><a id="snippet-sample_localdurabletransportapp"></a></p><div class="language-cs"><pre><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> <span class="token keyword">await</span> Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseJasper</span><span class="token punctuation">(</span>opts <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Make the default local queue durable</span>
        opts<span class="token punctuation">.</span>DefaultLocalQueue<span class="token punctuation">.</span><span class="token function">UseInbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Or do just this by name</span>
        opts<span class="token punctuation">.</span><span class="token function">LocalQueue</span><span class="token punctuation">(</span><span class="token string">&quot;important&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">UseInbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">StartAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/MessagingConfigurationExamples.cs#L124-L137" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_localdurabletransportapp" title="Start of snippet">anchor</a></sup></p><p>See <a href="http://localhost:5050/guide/persistence/" target="_blank" rel="noopener noreferrer">Persistent Messaging</a> for more information.</p><h2 id="scheduling-local-execution" tabindex="-1">Scheduling Local Execution <a class="header-anchor" href="#scheduling-local-execution" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you need the command scheduling to be persistent or be persisted across service restarts, you&#39;ll need to enable the <a href="/guide/persistence/">message persistence</a> within Jasper.</p></div><p>The &quot;scheduled execution&quot; feature can be used with local execution within the same application. See <a href="/guide/scheduled.html">Scheduled Messages</a> for more information. Use the <code>ICommandBus.ScheduleAsync()</code> methods like this:</p><p><a id="snippet-sample_schedule_job_locally"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ScheduleLocally</span><span class="token punctuation">(</span><span class="token class-name">IExecutionContext</span> bus<span class="token punctuation">,</span> <span class="token class-name">Guid</span> invoiceId<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidateInvoiceIsNotLate</span>
    <span class="token punctuation">{</span>
        InvoiceId <span class="token operator">=</span> invoiceId
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Schedule the message to be processed in a certain amount</span>
    <span class="token comment">// of time</span>
    <span class="token keyword">await</span> bus<span class="token punctuation">.</span><span class="token function">ScheduleAsync</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">.</span><span class="token function">Days</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Schedule the message to be processed at a certain time</span>
    <span class="token keyword">await</span> bus<span class="token punctuation">.</span><span class="token function">ScheduleAsync</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> DateTimeOffset<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/PublishingSamples.cs#L117-L132" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_schedule_job_locally" title="Start of snippet">anchor</a></sup></p><h2 id="configuring-parallelization-and-execution-properties" tabindex="-1">Configuring Parallelization and Execution Properties <a class="header-anchor" href="#configuring-parallelization-and-execution-properties" aria-hidden="true">#</a></h2><p>The queues are built on top of the TPL Dataflow library, so it&#39;s pretty easy to configure parallelization (how many concurrent messages could be handled by a queue). Here&#39;s an example of how to establish this:</p><p><a id="snippet-sample_localqueuesapp"></a></p><div class="language-cs"><pre><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> <span class="token keyword">await</span> Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseJasper</span><span class="token punctuation">(</span>opts <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Force a local queue to be</span>
        <span class="token comment">// strictly first in, first out</span>
        <span class="token comment">// with no more than a single</span>
        <span class="token comment">// thread handling messages enqueued</span>
        <span class="token comment">// here</span>

        <span class="token comment">// Use this option if message ordering is</span>
        <span class="token comment">// important</span>
        opts<span class="token punctuation">.</span><span class="token function">LocalQueue</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Sequential</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Specify the maximum number of parallel threads</span>
        opts<span class="token punctuation">.</span><span class="token function">LocalQueue</span><span class="token punctuation">(</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">MaximumParallelMessages</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Or just edit the ActionBlock options directly</span>
        opts<span class="token punctuation">.</span><span class="token function">LocalQueue</span><span class="token punctuation">(</span><span class="token string">&quot;three&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ConfigureExecution</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                options<span class="token punctuation">.</span>MaxDegreeOfParallelism <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
                options<span class="token punctuation">.</span>BoundedCapacity <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// And finally, this enrolls a queue into the persistent inbox</span>
        <span class="token comment">// so that messages can happily be retained and processed</span>
        <span class="token comment">// after the service is restarted</span>
        opts<span class="token punctuation">.</span><span class="token function">LocalQueue</span><span class="token punctuation">(</span><span class="token string">&quot;four&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UseInbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">StartAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/PublishingSamples.cs#L12-L47" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_localqueuesapp" title="Start of snippet">anchor</a></sup></p><h2 id="explicitly-enqueue-to-a-specific-local-queue" tabindex="-1">Explicitly Enqueue to a Specific Local Queue <a class="header-anchor" href="#explicitly-enqueue-to-a-specific-local-queue" aria-hidden="true">#</a></h2><p>If you want to enqueue a message locally to a specific worker queue, you can use this syntax:</p><p><a id="snippet-sample_iservicebus.enqueue_to_specific_worker_queue"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token return-type class-name">ValueTask</span> <span class="token function">EnqueueToQueue</span><span class="token punctuation">(</span><span class="token class-name">IExecutionContext</span> bus<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> @<span class="token keyword">event</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvoiceCreated</span>
    <span class="token punctuation">{</span>
        Time <span class="token operator">=</span> DateTimeOffset<span class="token punctuation">.</span>Now<span class="token punctuation">,</span>
        Purchaser <span class="token operator">=</span> <span class="token string">&quot;Guy Fieri&quot;</span><span class="token punctuation">,</span>
        Amount <span class="token operator">=</span> <span class="token number">112.34</span><span class="token punctuation">,</span>
        Item <span class="token operator">=</span> <span class="token string">&quot;Cookbook&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Put this message in a local worker</span>
    <span class="token comment">// queue named &#39;highpriority&#39;</span>
    <span class="token keyword">return</span> bus<span class="token punctuation">.</span><span class="token function">EnqueueAsync</span><span class="token punctuation">(</span>@<span class="token keyword">event</span><span class="token punctuation">,</span> <span class="token string">&quot;highpriority&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/PublishingSamples.cs#L83-L98" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_iservicebus.enqueue_to_specific_worker_queue" title="Start of snippet">anchor</a></sup></p><h2 id="local-queues-as-a-messaging-transport" tabindex="-1">Local Queues as a Messaging Transport <a class="header-anchor" href="#local-queues-as-a-messaging-transport" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">warning</p><p>The local transport is used underneath the covers by Jasper for retrying locally enqueued messages or scheduled messages that may have initially failed.</p></div><p>In the sample Jasper configuration shown below:</p><p><a id="snippet-sample_localtransportapp"></a></p><div class="language-cs"><pre><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> <span class="token keyword">await</span> Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseJasper</span><span class="token punctuation">(</span>opts <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Publish Message2 messages to the &quot;important&quot;</span>
        <span class="token comment">// local queue</span>
        opts<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">PublishMessage</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Message2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ToLocalQueue</span><span class="token punctuation">(</span><span class="token string">&quot;important&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">StartAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Samples/DocumentationSamples/MessagingConfigurationExamples.cs#L104-L115" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_localtransportapp" title="Start of snippet">anchor</a></sup></p><p>Calling <code>IMessagePublisher.Send(new Message2())</code> would publish the message to the local &quot;important&quot; queue.</p>`,58),o=[p];function c(u,l,i,r,k,d){return n(),a("div",null,o)}var g=s(t,[["render",c]]);export{h as __pageData,g as default};
